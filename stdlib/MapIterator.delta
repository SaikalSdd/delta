struct MapIterator<Key, Value>: Copyable, Iterator<(key: Key, value: Value)*> {
    var hashTableIterator: ArrayIterator<Array<(key: Key, value: Value)>>;
    var current: (key: Key, value: Value)*;

    init(map: Map<Key, Value>*) {
        hashTableIterator = map.hashTable.iterator();
        current = undefined;
        skipEmptySlots();
    }

    func hasValue() -> bool {
        return hashTableIterator.hasValue();
    }

    func value() -> (key: Key, value: Value)* {
        return current;
    }

    mutating func increment() {
        let slot = hashTableIterator.value();
        let slotEnd = slot.data() + slot.size();
        current++;

        if (current === slotEnd) {
            hashTableIterator.increment();
            skipEmptySlots();
        }
    }

    mutating private func skipEmptySlots() {
        while (hashTableIterator.hasValue()) {
            if (hashTableIterator.value().size() != 0) {
                current = hashTableIterator.value().data();
                break;
            }
            hashTableIterator.increment();
        }
    }
}
