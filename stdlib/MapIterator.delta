struct MapIterator<Key, Value>: Iterator<KeyValuePair<Key, Value>*> {
    var hashTableIterator: ArrayIterator<Array<KeyValuePair<Key, Value>>>;
    var current: KeyValuePair<Key, Value>*;

    init(map: Map<Key, Value>* ) {
        hashTableIterator = map.hashTable.iterator();
        current = undefined;
        _skipEmptySlots();
    }

    func hasValue() -> bool {
        return hashTableIterator.hasValue();
    }

    func value() -> KeyValuePair<Key, Value>* {
        return current;
    }

    mutating func increment() {
        let slot = hashTableIterator.value();
        let slotEnd = slot.data() + slot.size();
        current++;

        if (addressof(current) == addressof(slotEnd)) {
            hashTableIterator.increment();
            _skipEmptySlots();
        }
    }

    mutating func _skipEmptySlots() {
        while (hashTableIterator.hasValue()) {
            if (hashTableIterator.value().size() != 0) {
                current = hashTableIterator.value().data();
                break;
            }
            hashTableIterator.increment();
        }
    }
}
