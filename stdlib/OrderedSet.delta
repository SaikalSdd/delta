/// An ordered Set that supports fast lookup, insertion and deletion.
struct OrderedSet<Element> {
    var map: OrderedMap<Element, bool>;

    /// Initiates an empty Set.
    init() {
        map = OrderedMap<Element, bool>();
    }

    /// Inserts an element into the Set.
    mutating func insert(e: Element) -> bool {
        return map.insert(e, false);
    }

    /// Returns true if the Set contains `e`, otherwise false.
    func contains(e: Element*) -> bool {
        return map.contains(e);
    }

    /// Removes an element from the Set, if it exists.
    mutating func remove(e: Element*) {
        map.remove(e);
    }

    /// Returns the value immediately lower than `e`, or `null` if
    /// `e` is the smallest element in the Set.
    func lower(e: Element*) -> Element*? {
        return map.lowerKey(e);
    }

    /// Returns the value immediately higher than `e`, or `null` if
    /// `e` is the largest element in the Set.
    func higher(e: Element*) -> Element*? {
        return map.higherKey(e);
    }

    /// Returns the smallest element in the Set, or `null` if the Set is empty.
    func first() -> Element*? {
        return map.first();
    }

    /// Returns the largest element in the Set, or `null` if the Set is empty.
    func last() -> Element*? {
        return map.last();
    }

    /// Returns the size of the Set.
    func size() -> uint {
        return map.size();
    }

    /// Returns true if the Set is empty, otherwise false.
    func isEmpty() -> bool {
        return map.size() == 0;
    }

    /// Iterate over the map, in order
    func iterator() -> OrderedSetIterator<Element> {
        return OrderedSetIterator(this);
    }
}
