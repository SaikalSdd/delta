struct ArrayRef<Element>: Copyable {
    var data: Element*;
    var size: uint;

    /// Initializes an ArrayRef referring to an empty array.
    init() {
        data = undefined;
        size = 0;
    }

    /// Initializes an ArrayRef referring to the elements of the given Array.
    init(array: Array<Element>* ) {
        data = array.data();
        size = array.size();
    }

    /// Initializes an ArrayRef referring to an array of the given size located at the given memory
    /// address.
    init(data: Element*, size: uint) {
        this.data = data;
        this.size = size;
    }

    /// Returns the number of elements in the array.
    def size(): uint {
        return size;
    }

    /// Returns a reference to the element at the given index.
    def [](index: uint): Element* {
        return data + index;
    }

    def data(): Element* {
        return data;
    }

    def iterator(): ArrayIterator<Element> {
        return ArrayIterator(this);
    }
}
