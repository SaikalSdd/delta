// TODO: Remove code duplication by declaring an 'Integer' interface that implements the 'compare'
// function for all integer types.

struct int: Copyable, Comparable {
    func compare(other: int*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct int8: Copyable, Comparable {
    func compare(other: int8*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct int16: Copyable, Comparable {
    func compare(other: int16*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct int32: Copyable, Comparable {
    func compare(other: int32*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct int64: Copyable, Comparable {
    func compare(other: int64*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct uint: Copyable, Comparable {
    func compare(other: uint*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct uint8: Copyable, Comparable {
    func compare(other: uint8*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct uint16: Copyable, Comparable {
    func compare(other: uint16*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct uint32: Copyable, Comparable {
    func compare(other: uint32*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}

struct uint64: Copyable, Comparable {
    func compare(other: uint64*) -> Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }
}
