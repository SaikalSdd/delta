// TODO: Remove code duplication by declaring an 'Integer' interface that implements the 'compare'
// function for all integer types.

// TODO: Improve printTo() implementations: optimize + don't depend on libc + don't assume size of int.

def printSigned<T>(value: T, stream: mutable String*) {
    var result: char[22] = undefined;
    sprintf(result, "%lld", value);
    stream.write(StringRef(result));
}

def printUnsigned<T>(value: T, stream: mutable String*) {
    var result: char[22] = undefined;
    sprintf(result, "%llu", value);
    stream.write(StringRef(result));
}

struct int: Copyable, Comparable, Printable {
    def compare(other: int*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printSigned(this, stream);
    }
}

struct int8: Copyable, Comparable, Printable {
    def compare(other: int8*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printSigned(this, stream);
    }
}

struct int16: Copyable, Comparable, Printable {
    def compare(other: int16*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printSigned(this, stream);
    }
}

struct int32: Copyable, Comparable, Printable {
    def compare(other: int32*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printSigned(this, stream);
    }
}

struct int64: Copyable, Comparable, Printable {
    def compare(other: int64*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printSigned(this, stream);
    }
}

struct uint: Copyable, Comparable, Printable {
    def compare(other: uint*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printUnsigned(this, stream);
    }
}

struct uint8: Copyable, Comparable, Printable {
    def compare(other: uint8*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printUnsigned(this, stream);
    }
}

struct uint16: Copyable, Comparable, Printable {
    def compare(other: uint16*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printUnsigned(this, stream);
    }
}

struct uint32: Copyable, Comparable, Printable {
    def compare(other: uint32*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printUnsigned(this, stream);
    }
}

struct uint64: Copyable, Comparable, Printable {
    def compare(other: uint64*): Ordering {
        return (this < *other) ? Ordering.Less : (this > *other) ? Ordering.Greater : Ordering.Equal;
    }

    def printTo(stream: mutable String*) {
        printUnsigned(this, stream);
    }
}
