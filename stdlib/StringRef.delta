struct StringRef: Copyable, Comparable, Hashable, Printable {
    var characters: ArrayRef<char>;

    init(pointer: char*, length: uint) {
        characters = ArrayRef<char>(pointer, length);
    }

    /// Initializes a StringRef referring to a null-terminated C-style string.
    ///
    /// __Note:__ This initializer has a time complexity of O(n) because it has to calculate the
    /// length of the argument string. If you know the length beforehand, consider using
    /// `StringRef.init(pointer: char*, length: uint)` instead.
    ///
    init(cString: char*) {
        characters = ArrayRef<char>(cString, uint(strlen(cString)));
    }

    init (string: String*) {
        characters = ArrayRef<char>(string.data(), string.size());
    }

    func size() -> uint {
        return characters.size();
    }

    /// Returns the character at the given index.
    func [](index: uint) -> char {
        return *characters[index];
    }

    func data() -> char* {
        return characters.data();
    }

    /// Supports using strings with sets and dicts
    func hash() -> uint64 {
        var hashValue: uint64 = 5381;

        for (let index in 0..characters.size()) {
            hashValue = ((hashValue << 5) + hashValue) + uint64(this[index]);
        }

        return hashValue;
    }

    func iterator() -> StringIterator {
        return StringIterator(this);
    }

    func printTo(stream: mutable String*) {
        stream.write(this);
    }

    func compare(other: StringRef*) -> Ordering {
        for (let index in 0..*min(size(), other.size())) {
            if (this[index] < other[index]) { return Ordering.Less; }
            if (this[index] > other[index]) { return Ordering.Greater; }
        }
        if (size() < other.size()) { return Ordering.Less; }
        if (size() > other.size()) { return Ordering.Greater; }
        return Ordering.Equal;
    }
}

func ==(a: StringRef, b: StringRef) -> bool {
    if (a.size() != b.size()) {
        return false;
    }

    for (let index in 0..a.size()) {
        if (a[index] != b[index]) {
            return false;
        }
    }

    return true;
}
