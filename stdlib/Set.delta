struct Set<Key: Hashable> {

    var map: Map<Key, bool>;

    /// Initializes an empty set
    init() {
        map = Map<Key, bool>();
    }

    /// Inserts an element into the set. If the element exists already, nothing is done.
    mutating def insert(key: Key) {
        map.insert(key, false);
    }

    /// Removes an element from the set, if it exists there.
    mutating def remove(key: Key*) {
        map.remove(key);
    }

    /// Checks if e is part of the set.
    def contains(key: Key*): bool {
        return map.contains(key);
    }

    def size(): uint {
        return map.size();
    }

    def isEmpty(): bool {
        return map.isEmpty();
    }

    def iterator(): SetIterator<Key> {
        return SetIterator(this);
    }
}
