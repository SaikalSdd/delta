struct Tape
{
    List<int> tape;
    int pos;

    init()
    {
        tape = List<int>([0]);
        pos = 0;
    }

    int value()
    {
        return tape[pos];
    }

    mutating void increment()
    {
        tape[pos]++;
    }

    mutating void decrement()
    {
        tape[pos]--;
    }

    mutating void forward()
    {
        pos++;

        if (pos >= tape.size())
            tape.push(0);
    }

    mutating void backward()
    {
        if (pos > 0)
            pos--;
    }
}

struct Program
{
    String code;
    Map<int, int> bracketMap;

    init(String text)
    {
        this.code = String();
        this.bracketMap = Map<int, int>();

        var leftStack = List<int>();
        var pc = 0;

        for (var ch in text)
        {
            if (!"+-><[].,".contains(ch))
                continue;

            switch (ch)
            {
                case '[':
                    leftStack.push(pc);

                case ']':
                    if (!leftStack.empty())
                    {
                        var left = leftStack.pop();
                        var right = pc;
                        bracketMap.set(left, right);
                        bracketMap.set(right, left);
                    }
            }

            pc++;
            code.push(ch);
        }
    }

    void run()
    {
        var tape = Tape();
        var pc = 0;
        var size = code.size();

        while (pc < size)
        {
            switch (code[pc])
            {
                case '+':
                    tape.increment();

                case '-':
                    tape.decrement();

                case '>':
                    tape.forward();

                case '<':
                    tape.backward();

                case '[':
                    if (tape.value() == 0)
                        pc = *(bracketMap[pc]!);

                case ']':
                    if (tape.value() != 0)
                        pc = *(bracketMap[pc]!);

                case '.':
                    printf("%c", char(tape.value()));
            }

            pc++;
        }
    }
}

void main()
{
    var file = FileStream("./inputs/mandel.b");
    var text = String();

    for (var byte in file.bytes())
        text.push(char(byte));

    Program(text).run();
}
