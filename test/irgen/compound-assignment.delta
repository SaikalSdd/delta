// RUN: %delta -print-ir %s | %FileCheck %s

// CHECK-LABEL: define i32 @main
def main() {
    // CHECK: %i = alloca i32
    // CHECK-NEXT: store i32 0, i32* %i
    var i = 0;

    // CHECK-NEXT: %1 = load i32, i32* %i
    // CHECK-NEXT: %2 = add i32 %1, 1
    // CHECK-NEXT: store i32 %2, i32* %i
    i += 1;

    // CHECK-NEXT: %3 = load i32, i32* %i
    // CHECK-NEXT: %4 = sub i32 %3, 1
    // CHECK-NEXT: store i32 %4, i32* %i
    i -= 1;

    // CHECK-NEXT: %5 = load i32, i32* %i
    // CHECK-NEXT: %6 = mul i32 %5, 1
    // CHECK-NEXT: store i32 %6, i32* %i
    i *= 1;

    // CHECK-NEXT: %7 = load i32, i32* %i
    // CHECK-NEXT: %8 = sdiv i32 %7, 1
    // CHECK-NEXT: store i32 %8, i32* %i
    i /= 1;

    // CHECK-NEXT: %9 = load i32, i32* %i
    // CHECK-NEXT: %10 = and i32 %9, 1
    // CHECK-NEXT: store i32 %10, i32* %i
    i &= 1;

    // CHECK-NEXT: %11 = load i32, i32* %i
    // CHECK-NEXT: %12 = or i32 %11, 1
    // CHECK-NEXT: store i32 %12, i32* %i
    i |= 1;

    // CHECK-NEXT: %13 = load i32, i32* %i
    // CHECK-NEXT: %14 = xor i32 %13, 1
    // CHECK-NEXT: store i32 %14, i32* %i
    i ^= 1;

    // CHECK-NEXT: %15 = load i32, i32* %i
    // CHECK-NEXT: %16 = shl i32 %15, 1
    // CHECK-NEXT: store i32 %16, i32* %i
    i <<= 1;

    // CHECK-NEXT: %17 = load i32, i32* %i
    // CHECK-NEXT: %18 = ashr i32 %17, 1
    // CHECK-NEXT: store i32 %18, i32* %i
    i >>= 1;
}
