// RUN: %delta -print-ir %s | %FileCheck %s

// CHECK: %Foo = type { i32, i1 }
struct Foo: Copyable {
    var a: int;
    let b: bool;

    // CHECK: define void @Foo.init(%Foo* %this, i32 %a, i1 %b)
    init(a: int, b: bool) {
        // CHECK-NEXT: %a1 = getelementptr inbounds %Foo, %Foo* %this, i32 0, i32 0
        // CHECK-NEXT: store i32 %a, i32* %a1
        this.a = a;
        // CHECK-NEXT: %b2 = getelementptr inbounds %Foo, %Foo* %this, i32 0, i32 1
        // CHECK-NEXT: store i1 %b, i1* %b2
        this.b = b;
        // CHECK-NEXT: %a3 = getelementptr inbounds %Foo, %Foo* %this, i32 0, i32 0
        // CHECK-NEXT: %1 = load i32, i32* %a3
        // CHECK-NEXT: %2 = add i32 %1, 1
        // CHECK-NEXT: store i32 %2, i32* %a3
        this.a++;

        // CHECK-NEXT: ret void
    }
}

func main() {
    // CHECK: %f = alloca %Foo
    // CHECK: call void @Foo.init(%Foo* %f, i32 666, i1 true)
    var f = Foo(666, true);
    // CHECK-NEXT: %a = getelementptr inbounds %Foo, %Foo* %f, i32 0, i32 0
    // CHECK-NEXT: %1 = load i32, i32* %a
    // CHECK-NEXT: %2 = add i32 %1, 1
    // CHECK-NEXT: store i32 %2, i32* %a
    f.a++;
    // CHECK-NEXT: %a1 = getelementptr inbounds %Foo, %Foo* %f, i32 0, i32 0
    // CHECK-NEXT: %3 = load i32, i32* %a1
    // CHECK-NEXT: store i32 %3, i32* %bar
    var bar = f.a;
    // CHECK-NEXT: %b = getelementptr inbounds %Foo, %Foo* %f, i32 0, i32 1
    // CHECK-NEXT: %4 = load i1, i1* %b
    // CHECK-NEXT: store i1 %4, i1* %qux
    var qux = f.b;
    // CHECK-NEXT: ret
}
