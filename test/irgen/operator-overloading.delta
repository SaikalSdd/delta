// RUN: %delta -print-ir %s | %FileCheck %s

struct vec2: Copyable {
    let x: int
    let y: int

    init(x: int, y: int) {
        this.x = x
        this.y = y
    }

    // CHECK: define i32 @_EN4main4vec2ixE5index3int(%vec2 %this, i32 %index)
    def [](index: int): int {
        return index
    }
}

// CHECK: define %vec2 @_EN4mainmlE1a4vec21b4vec2(%vec2 %a, %vec2 %b)
def *(a: vec2, b: vec2): vec2 {
    return vec2(a.x * b.x, a.y * b.y)
}

def main() {
    var v = vec2(3, 2)

    // CHECK: call %vec2 @_EN4mainmlE1a4vec21b4vec2(%vec2 %{{[0-9]+}}, %vec2 %v1)
    v = vec2(2, 4) * v

    // CHECK: call i1 [[EQ:@_EN4maineqE1a4vec21b4vec2]](%vec2 %v2, %vec2 %{{[0-9]+}})
    _ = v == vec2(-1, 3)

    // CHECK: call i32 @_EN4main4vec2ixE5index3int(%vec2 %{{[[:alnum:]_]+}}, i32 %{{[[:alnum:]_]+}})
    _ = v[v.x]

    // CHECK-NEXT: ret
}

// CHECK-DAG: define i1 [[EQ]](%vec2 %a, %vec2 %b)
def ==(a: vec2, b: vec2): bool {
    return a.x == b.x
}

struct A<T>: Copyable {}

def ==<T>(a: A<T>, b: A<T>): bool {
    return true
}
