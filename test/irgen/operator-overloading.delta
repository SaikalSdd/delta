// RUN: %delta -print-ir %s | %FileCheck %s

struct vec2: Copyable {
    let x: int
    let y: int

    init(x: int, y: int) {
        this.x = x
        this.y = y
    }

    // CHECK: define i32 @"vec2.[]"(%vec2 %this, i32 %index)
    func [](index: int) -> int {
        return index
    }
}

// CHECK: define %vec2 @"*"(%vec2 %a, %vec2 %b)
func *(a: vec2, b: vec2) -> vec2 {
    return vec2(a.x * b.x, a.y * b.y)
}

func main() {
    var v = vec2(3, 2)

    // CHECK: call %vec2 @"*"(%vec2 %{{[0-9]+}}, %vec2 %v1)
    v = vec2(2, 4) * v

    // CHECK: call i1 [[EQ:@"==\.[0-9]+"]](%vec2 %v2, %vec2 %{{[0-9]+}})
    _ = v == vec2(-1, 3)

    // CHECK: call i32 @"vec2.[]"(%vec2 %{{[[:alnum:]_]+}}, i32 %{{[[:alnum:]_]+}})
    _ = v[v.x]

    // CHECK-NEXT: ret
}

// CHECK-DAG: define i1 [[EQ]](%vec2 %a, %vec2 %b)
func ==(a: vec2, b: vec2) -> bool {
    return a.x == b.x
}

struct A<T>: Copyable {}

func ==<T>(a: A<T>, b: A<T>) -> bool {
    return true
}
