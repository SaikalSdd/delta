// RUN: %delta -print-ir %s | %FileCheck %s
// RUN: %delta -print-ir %s | %FileCheck %s -check-prefix=CHECK-MAIN

struct Foo {
    var baz: int;

    // CHECK: define void @Foo.init(%Foo* %this)
    // CHECK-NEXT: %baz = getelementptr inbounds %Foo, %Foo* %this, i32 0, i32 0
    // CHECK-NEXT: store i32 42, i32* %baz
    // CHECK-NEXT: ret void
    init() { this.baz = 42; }

    // CHECK: define void @Foo.bar(%Foo* %this)
    // CHECK-NEXT: %baz = getelementptr inbounds %Foo, %Foo* %this, i32 0, i32 0
    // CHECK-NEXT: %1 = load i32, i32* %baz
    // CHECK-NEXT: %2 = add i32 %1, 1
    // CHECK-NEXT: store i32 %2, i32* %baz
    // CHECK-NEXT: ret void
    mutating func bar() { this.baz++; }

    // CHECK: define i32 @Foo.qux(%Foo* %this)
    // CHECK-NEXT: %baz = getelementptr inbounds %Foo, %Foo* %this, i32 0, i32 0
    // CHECK-NEXT: %1 = load i32, i32* %baz
    // CHECK-NEXT: ret i32 %1
    func qux() -> int { return this.baz; }
}

func main() {
    // CHECK-MAIN: %foo = alloca %Foo
    // CHECK-MAIN-NEXT: %i = alloca i32

    // CHECK-MAIN-NEXT: call void @Foo.init(%Foo* %foo)
    var foo = Foo();

    // CHECK-MAIN-NEXT: call void @Foo.bar(%Foo* %foo)
    foo.bar();

    // CHECK-MAIN-NEXT: %1 = call i32 @Foo.qux(%Foo* %foo)
    // CHECK-MAIN-NEXT: store i32 %1, i32* %i
    var i = foo.qux();
}
