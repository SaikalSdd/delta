// RUN: %delta -print-ir %s | %FileCheck %s

struct Foo {
    var i: int;

    // CHECK: define void @Foo.deinit(%Foo* %this)
    // CHECK-NEXT: %i = getelementptr inbounds %Foo, %Foo* %this, i32 0, i32 0
    // CHECK-NEXT: store i32 0, i32* %i
    // CHECK-NEXT: call void @Foo.f(%Foo* %this)
    // CHECK-NEXT: call void @Foo.f(%Foo* %this)
    // CHECK-NEXT: ret void
    deinit() {
        i = 0;
        f();
        this.f();
    }

    mutating func f() {}
}

struct Bar: Copyable {
    var i: int;

    // CHECK: define void @Bar.deinit(%Bar* %this)
    // CHECK-NEXT: %i = getelementptr inbounds %Bar, %Bar* %this, i32 0, i32 0
    // CHECK-NEXT: store i32 0, i32* %i
    // CHECK-NEXT: call void @Bar.f(%Bar* %this)
    // CHECK-NEXT: call void @Bar.f(%Bar* %this)
    // CHECK-NEXT: ret void
    deinit() {
        i = 0;
        f();
        this.f();
    }

    mutating func f() {}
}

func main() {
    let f: Foo = undefined;
    if (false) {
        let f2: Foo = undefined;
        // CHECK: then:                                             ; preds = %0
        // CHECK-NEXT: call void @Foo.deinit(%Foo* %f2)
        // CHECK-NEXT: br label %endif
    }
    let b: Bar = undefined;
    while (false) {
        let b2: Bar = undefined;
        // CHECK: call void @Bar.deinit(%Bar* %b2)
        // CHECK-NEXT: call void @Bar.deinit(%Bar* %b)
        // CHECK-NEXT: call void @Foo.deinit(%Foo* %f)
        // CHECK-NEXT: ret i32 0
        return;
    }
    var i = 1;
    // CHECK: store i32 1, i32* %i
    // CHECK-NEXT: call void @Bar.deinit(%Bar* %b)
    // CHECK-NEXT: call void @Foo.deinit(%Foo* %f)
    // CHECK-NEXT: ret i32 0
}
