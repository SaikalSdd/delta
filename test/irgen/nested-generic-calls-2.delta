// RUN: %delta -print-ir %s | %FileCheck %s
// RUN: %delta -print-ir %s | %FileCheck %s -check-prefix=CHECK-M

interface I {
    func i();
}

struct S: Copyable {
    let i: int;
    init() {}
    func i() {}
}

struct A<E> {
    init() {}

    // CHECK: define %S @"A<S>.a"({}* %this)
    func a() -> E {
        // CHECK-NEXT: %1 = alloca %S
        // CHECK-NEXT: call void @S.init(%S* %1)
        // CHECK-NEXT: %2 = load %S, %S* %1
        // CHECK-NEXT: ret %S %2
        return E();
    }
}

struct M<T: I> {
    let t: T;

    init() {}

    // CHECK-M: define void @"M<S>.f"(%"M<S>"* %this)
    func f() {
        let a = A<T>();
        // CHECK-M: [[TMP:%[0-9]+]] = call %S @"A<S>.a"({}* %a)
        // CHECK-M-NEXT: call void @S.i(%S [[TMP]])
        a.a().i();
    }
}

func main() {
    let m = M<S>();
    m.f();
}
