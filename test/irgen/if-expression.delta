// RUN: %delta -print-ir %s | %FileCheck %s

extern def a() -> bool;
extern def b() -> bool;
extern def c() -> bool;
extern def d() -> bool;
extern def e() -> bool;

// CHECK: define void @{{.*foo.*}}()
def foo() {
    // CHECK-NEXT: %x = alloca i1
    // CHECK-NEXT: %1 = call i1 @{{.*a.*}}()
    // CHECK-NEXT: br i1 %1, label %then, label %else

    // CHECK: then:                                             ; preds = %0
    // CHECK-NEXT: %2 = call i1 @{{.*b.*}}()
    // CHECK-NEXT: br label %endif3

    // CHECK: else:                                             ; preds = %0
    // CHECK-NEXT: %3 = call i1 @{{.*c.*}}()
    // CHECK-NEXT: br i1 %3, label %then1, label %else2

    // CHECK: then1:                                            ; preds = %else
    // CHECK-NEXT: %4 = call i1 @{{.*d.*}}()
    // CHECK-NEXT: br label %endif

    // CHECK: else2:                                            ; preds = %else
    // CHECK-NEXT: %5 = call i1 @{{.*e.*}}()
    // CHECK-NEXT: br label %endif

    // CHECK: endif:                                            ; preds = %else2, %then1
    // CHECK-NEXT: %phi = phi i1 [ %4, %then1 ], [ %5, %else2 ]
    // CHECK-NEXT: br label %endif3

    // CHECK: endif3:                                           ; preds = %endif, %then
    // CHECK-NEXT: %phi4 = phi i1 [ %2, %then ], [ %phi, %endif ]
    // CHECK-NEXT: store i1 %phi4, i1* %x

    let x = a() ? b() : c() ? d() : e();

    // CHECK-NEXT: ret void
}
