// RUN: check_exit_status 0 %delta run -Werror %s

func main() {
    testBytes();
    testLines();
    testWrite();
    testOutputStream();
    testInputStreamIsOpenOnNonexistingFile();
    testInputStream();
    testReadlineTwice();
    testMultipleEmptyLines();
    testIsEofWhileLoop();
}

func testBytes() {
    let f = FileStream("test.txt");

    let real = "this\nis the\nbest\n";
    var i: uint = 0;

    for (let byte in f.bytes()) {
        assert(real[i] == char(byte));
        i++;
    }

    assert(i == 17);
}

func testLines() {
    let f = FileStream("test.txt");

    var a = Array<StringRef>();
    a.push("this");
    a.push("is the");
    a.push("best");

    var i: uint = 0;

    for (let line in f.lines()) {
        assert(*a[i] == StringRef(line));
        i++;
    }

    assert(i == 3);
}

func testReadlineTwice() {
    let f = InputFileStream("test.txt");

    var a = f.readLine();
    assert(StringRef(a) == "this");
    a = f.readLine();
    assert(StringRef(a) == "is the");
}

func testMultipleEmptyLines() {
    let f = InputFileStream("corner.txt");

    var a = f.readLine();
    assert(StringRef(a) == "");

    a = f.readLine();
    assert(StringRef(a) == "");

    a = f.readLine();
    assert(StringRef(a) == "");

    assert(f.isEof());
}

func testIsEofWhileLoop() {
    let f = InputFileStream("test.txt");

    var a = Array<StringRef>();
    a.push("this");
    a.push("is the");
    a.push("best");

    var i: uint = 0;

    while (!f.isEof()) {
        let line = f.readLine();
        assert(*a[i] == StringRef(line));
        i++;
    }

    assert(i == 3);
}

func testWrite() {
    var f = FileStream("new.txt");

    let ret = f.write("best sentence\n");
    assert(ret);

    f = FileStream("new.txt");
    var read = f.readLine();

    f.close();
    remove("new.txt");
    assert(StringRef(read) == "best sentence");
}

func testInputStream() {
    var f = InputFileStream("test.txt");

    var a = Array<StringRef>();

    a.push("this");
    a.push("is the");
    a.push("best");

    var i: uint = 0;

    for (let line in f.lines()) {
        assert(*a[i] == StringRef(line));
        i++;
    }

    assert(i == 3);
}

func testInputStreamIsOpenOnNonexistingFile() {
    let f = InputFileStream("doesntexist");

    assert(!f.isOpen());

    let f2 = FileStream("test.txt");

    assert(f2.isOpen());
}

func testOutputStream() {
    var f = OutputFileStream("new.txt");

    let ret = f.write("best sentence\n");

    f.close();
    remove("new.txt");
    assert(ret);
}
