// RUN: check_exit_status 0 %delta run -Werror %s test-support.delta
// XFAIL: windows
// testIterator() segfaults on Windows for an unknown reason.

func main() {
    testInsert();
    testRemoval();
    testDuplicates();
    testIterator();
    testEmptyOrderedSetIterator();
    testUnitOrderedSetIterator();
    testFirstLast();
    testLowerAndHigher();
    testEmptyOrderedSetFunctions();
    testIteratorOrder();
}

func testInsert() {
    var s = OrderedSet<int>();

    s.insert(42);

    assert(s.contains(42), "Contains ok since it was added");
    assert(!s.contains(39), "Doesn't contain something that isn't there");
}


func testRemoval() {
    var s = OrderedSet<int>();

    s.insert(42);
    assert(s.contains(42), "Contains ok since it was added");

    s.remove(42);
    assert(!s.contains(42), "Doesn't contain ok anymore since it was removed");
}

func testDuplicates() {
    var s = OrderedSet<int>();

    s.insert(42);
    s.insert(42);
    assert(s.contains(42), "Contains ok since it was added");

    s.remove(42);
    assert(!s.contains(42), "Doesn't contain ok anymore since it was removed, even thogh it was added twice");
}

func testIterator() {
    var s = OrderedSet<int>();

    s.insert(1);
    s.insert(2);
    s.insert(3);
    s.insert(1);
    s.insert(2);
    s.insert(2);

    var a = false;
    var bb = false;
    var ccc = false;

    for (let e in s) {
        if (*e == 1) {
            assert(!a, "OrderedSet iterator returned element 1 twice");
            a = true;
        } else if (*e == 2) {
            assert(!bb, "OrderedSet iterator returned element 2 twice");
            bb = true;
        } else if (*e == 3) {
            assert(!ccc, "OrderedSet iterator returned element 3 twice");
            ccc = true;
        } else {
            assert(false, "OrderedSet iterator returned an element that should not be in the OrderedSet");
        }
    }

    assert(a, "OrderedSet iterator didn't return element 1");
    assert(bb, "OrderedSet iterator didn't return element 2");
    assert(ccc, "OrderedSet iterator didn't return element 3");
}

func testEmptyOrderedSetIterator() {
    var s = OrderedSet<int>();
    s.insert(79);
    s.insert(79);
    s.remove(79);

    for (let e in s) {
        assert(false, "Shouldn't enter for-loop body when the OrderedSet is empty");
    }
}

func testUnitOrderedSetIterator() {
    var s = OrderedSet<int>();
    s.insert(79);
    s.insert(79);
    var count = 0;

    for (let e in s) {
        count++;
        assert(*e == 79, "OrderedSet iterator returned an element that should not be in the OrderedSet");
    }

    assert(count == 1, "Should enter for-loop body once when OrderedSet contains one element");
}

func testLowerAndHigher() {
    var m = OrderedSet<int>();

    for (let i in 0..100) {
        m.insert(i);
    }

    assert(m.lower(0) == null, "lowerKey works correctly");
    for (let i in 1..100) {
        assert(*m.lower(i)! == i-1, "lowerKey works correctly");
    }

    assert(m.higher(99) == null, "higherKey works correctly");
    for (let i in 0..99) {
        assert(*m.higher(i)! == i+1, "higherKey works correctly");
    }
}

func testFirstLast() {
    var s = OrderedSet<uint>();

    s.insert(63);
    s.insert(69);
    s.insert(1);
    s.insert(53);

    assert(*s.first()! == 1, "first is 1");
    assert(*s.last()! == 69, "last is 69");
}

func testEmptyOrderedSetFunctions() {
    var s = OrderedSet<uint>();

    assert(s.first() == null, "testEmptySetFunctions - 1");
    assert(s.last() == null, "testEmptySetFunctions - 2");
    assert(s.higher(48) == null, "testEmptySetFunctions - 3");
    assert(s.lower(42) == null, "testEmptySetFunctions - 4");
}

func testIteratorOrder() {
    var set = OrderedSet<uint>();

    for (let i in 0..100) {
        set.insert(uint(i));
    }

    var called: uint = 0;
    for (let e in set) {
        assert(*e == called, "Element has correct value");
        called++;
    }

    assert(called == 100, "Called 100 times.");

    set = OrderedSet<uint>();

    for (let i in 0..100) {
        set.insert(uint(99 - i));
    }

    called = 0;
    // Still in correct order
    for (let e in set) {
        assert(*e == called, "Element has correct value");
        called++;
    }

    assert(called == 100, "Called 100 times.");
}
