// RUN: check_exit_status 0 %delta run -Werror %s

func main() {
    testInsert();
    testRemoval();
    testDuplicates();
    testGetter();
    testResize();
    testSize();
    testIterator();
    testEmptyMapIterator();
    testUnitMapIterator();
}

func testInsert() {
    var map = Map<StringRef, int>();

    map.insert("ok", 1);

    assert(map.contains("ok"));
    assert(!map.contains("lol"));
}

func testSize() {
    var map = Map<StringRef, StringRef>();

    assert(map.size() == 0);
    map.insert("best", "ok");
    assert(map.size() == 1);
}

func testGetter() {
    var map = Map<StringRef, int>();

    map.insert("ok", 42);
    assert(*(map["ok"]!) == 42);
}

func testResize() {
    var map = Map<String, int>();

    for (let i in 0..255) {
        var lol = String();

        for (let j in 0..(i+1)) {
            lol.push('a');
        }

        map.insert(lol, i);
    }

    assert(map.size() == 255);
}


func testRemoval() {
    var map = Map<StringRef, int>();
    assert(map.size() == 0);

    map.insert("ok", 2);

    assert(map.contains("ok"));
    assert(map.size() == 1);

    map.remove("ok");
    assert(!map.contains("ok"));
    assert(map.size() == 0);
}

func testDuplicates() {
    var map = Map<StringRef, int>();

    map.insert("ok", 1);
    map.insert("ok", 2);
    assert(map.contains("ok"));

    assert(*(map["ok"]!) == 1);

    map.remove("ok");
    assert(!map.contains("ok"));
    assert(map["ok"] == null);
}

func testIterator() {
    var map = Map<StringRef, StringRef>();

    map.insert("a", "a");
    map.insert("ccc", "ccc");
    map.insert("bb", "bb");
    map.insert("a", "a");
    map.insert("ccc", "ccc");
    map.insert("ccc", "ccc");

    var a = false;
    var bb = false;
    var ccc = false;

    for (let e in map) {
        if (e.key == "a") {
            assert(!a);
            a = true;
        } else if (e.key == "bb") {
            assert(!bb);
            bb = true;
        } else if (e.key == "ccc") {
            assert(!ccc);
            ccc = true;
        } else {
            assert(false);
        }
    }

    assert(a);
    assert(bb);
    assert(ccc);
}

func testEmptyMapIterator() {
    var map = Map<StringRef, StringRef>();
    map.insert("foo", "foo");
    map.insert("foo", "foo");
    map.remove("foo");

    for (let e in map) {
        assert(false);
    }
}

func testUnitMapIterator() {
    var map = Map<StringRef, StringRef>();
    map.insert("foo", "foo");
    map.insert("foo", "foo");
    var count = 0;

    for (let e in map) {
        count++;
        assert(e.key == "foo");
    }

    assert(count == 1);
}
