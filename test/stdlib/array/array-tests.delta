// RUN: check_exit_status 0 %delta run -Werror %s test-support.delta

class C {
    let i: int;

    init(i: int) {
        this.i = i;
    }

    deinit() {}
}

func main() {
    testArrayInsertionAndRemoval();
    testArrayInitFromLiteral();
    testArrayIterator();
    testArrayMutatingIteration();
    testArrayEnumeratedIterator();
    testEmpty();
    testMap();
    testFilter();
    testElementDestruction();
}

func testArrayInsertionAndRemoval() {
    var a = Array<C>();
    assert(a.size() == 0 && a.capacity() >= 0, "initial size and capacity are valid");

    a.push(C(1));
    assert(a[0].i == 1, "appended element has correct value");

    a.push(C(2));
    a.push(C(3));
    a.removeAt(1);
    assert(a[0].i == 1 && a[1].i == 3, "elements after removed element are shifted towards beginning");

    a.removeLast();
    a.push(C(4));
    assert(a.size() == 2 && a.capacity() >= 2, "size and capacity are valid after adding and removing elements");
}

func testArrayInitFromLiteral() {
    let a = Array([1, 2, 3]);

    assert(*a[0] == 1, "testArrayInitFromLiteral - 1");
    assert(*a[1] == 2, "testArrayInitFromLiteral - 2");
    assert(*a[2] == 3, "testArrayInitFromLiteral - 3");
}

func testArrayIterator() {
    var array = Array<C>();
    array.push(C(1));
    array.push(C(4));

    var iterator = array.iterator();

    assert(iterator.hasValue(), "testArrayIterator: hasValue() - 1");
    assert(iterator.value().i == 1, "testArrayIterator: value() - 1");

    iterator.increment();
    assert(iterator.hasValue(), "testArrayIterator: hasValue() - 2");
    assert(iterator.value().i == 4, "testArrayIterator: value() - 2");

    iterator.increment();
    assert(!iterator.hasValue(), "testArrayIterator: hasValue() - 3");
}

func testArrayMutatingIteration() {
    var a = Array<int>();
    a.push(1);
    a.push(2);
    a.push(3);

    for (let e in a) {
        *e++;
    }

    assert(*a[0] == 2, "mutating iteration modified elements in the array");
    assert(*a[1] == 3, "mutating iteration modified elements in the array");
    assert(*a[2] == 4, "mutating iteration modified elements in the array");
}

func testArrayEnumeratedIterator() {
    var a = Array<int>();
    a.push(9000);
    a.push(-1234);
    a.push(0xcafe);

    var iterator = a.enumerate();

    assert(iterator.hasValue(), "testArrayEnumeratedIterator: hasValue() - 1");
    assert(iterator.value().index == 0, "testArrayEnumeratedIterator: value().index - 1");
    assert(*iterator.value().value == 9000, "testArrayEnumeratedIterator: value().value - 1");

    iterator.increment();
    assert(iterator.hasValue(), "testArrayEnumeratedIterator: hasValue() - 2");
    assert(iterator.value().index == 1, "testArrayEnumeratedIterator: value().index - 2");
    assert(*iterator.value().value == -1234, "testArrayEnumeratedIterator: value().value - 2");

    iterator.increment();
    assert(iterator.hasValue(), "testArrayEnumeratedIterator: hasValue() - 3");
    assert(iterator.value().index == 2, "testArrayEnumeratedIterator: value().index - 3");
    assert(*iterator.value().value == 0xcafe, "testArrayEnumeratedIterator: value().value - 3");

    iterator.increment();
    assert(iterator.value().index == 3, "testArrayEnumeratedIterator: value().index - 4");
    assert(!iterator.hasValue(), "testArrayEnumeratedIterator: hasValue() - 4");
}

func testEmpty() {
    var a = Array<int>();

    assert(a.isEmpty(), "The array is empty");

    a.push(7);

    assert(!a.isEmpty(), "The array is now not empty");
}

func testMap() {
    var a = Array<int>();
    a.push(1);
    a.push(2);
    a.push(3);
    a.push(4);

    let b = a.map((value: int*) -> *value > 2);
    assert(b.size() == 4, "testMap 1");
    assert(*b[0] == false, "testMap 2");
    assert(*b[1] == false, "testMap 3");
    assert(*b[2] == true, "testMap 4");
    assert(*b[3] == true, "testMap 5");
}

func testFilter() {
    var a = Array<int>();
    a.push(1);
    a.push(2);
    a.push(3);
    a.push(4);

    let b = a.filter((value: int*) -> *value % 2 == 0);
    assert(b.size() == 2, "testFilter 1");
    assert(*b[0] == 2, "testFilter 2");
    assert(*b[1] == 4, "testFilter 3");
}

var deinits = 0;

class DestructionTester {
    init() {}

    deinit() {
        deinits++;
    }
}

func testElementDestruction() {
    var a = Array<DestructionTester>();

    for (let i in 0..50) {
        a.push(DestructionTester());
    }

    a.removeAt(25);
    a.removeAt(25);
    a.removeAt(25);
    a.removeLast();
    a.removeFirst();

    assert(deinits == 5, "testElementDestruction: wrong number of deinit calls");
}
