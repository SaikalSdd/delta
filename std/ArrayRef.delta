struct ArrayRef<Element>: Copyable {
    Element[?]* data;
    int size;

    /// Initializes an ArrayRef referring to an empty array.
    init() {
        data = undefined;
        size = 0;
    }

    /// Initializes an ArrayRef referring to the elements of the given List.
    init(List<Element>* list) {
        data = list.data();
        size = list.size();
    }

    /// Initializes an ArrayRef referring to an array of the given size located at the given memory
    /// address.
    init(Element* data, int size) {
        this.data = data;
        this.size = size;
    }

    bool empty() {
        return size == 0;
    }

    /// Returns the number of elements in the array.
    int size() {
        return size;
    }

    /// Returns the first element in the array.
    Element* front() {
        if (empty()) indexOutOfBounds("front", 0);
        return data[0];
    }

    /// Returns a reference to the element at the given index.
    Element* operator[](int index) {
        if (index < 0 || index >= size()) indexOutOfBounds("operator[]", index);
        return data[index];
    }

    Element[?]* data() {
        return data;
    }

    ArrayIterator<Element> iterator() {
        return ArrayIterator(this);
    }

    private void indexOutOfBounds(string function, int index) {
        print("ArrayRef.", function, ": index ", index, " is out of bounds, size is ", size());
        fatalError();
    }
}

bool operator==<T>(ArrayRef<T> a, ArrayRef<T> b) {
    if (a.size() != b.size()) {
        return false;
    }

    for (var i in 0..a.size()) {
        if (a[i] != b[i]) {
            return false;
        }
    }

    return true;
}
