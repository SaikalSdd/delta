struct ArrayRef<Element>: Copyable {
    Element[?]* data;
    int size;

    /// Initializes an ArrayRef referring to an empty array.
    init() {
        data = undefined;
        size = 0;
    }

    /// Initializes an ArrayRef referring to the elements of the given List.
    init(List<Element>* list) {
        data = list.data();
        size = list.size();
    }

    /// Initializes an ArrayRef referring to an array of the given size located at the given memory
    /// address.
    init(Element* data, int size) {
        this.data = data;
        this.size = size;
    }

    /// Returns the number of elements in the array.
    int size() {
        return size;
    }

    /// Returns a reference to the element at the given index.
    Element* operator[](int index) {
        return &data[index];
    }

    Element[?]* data() {
        return data;
    }

    ArrayIterator<Element> iterator() {
        return ArrayIterator(this);
    }
}
