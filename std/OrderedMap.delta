/// An ordered key-value container that supports fast insertion, deletion and lookup
struct OrderedMap<Key, Value> {

    var root: mutable AVLnode<Key, Value>*?;
    var size: int;

    init() {
        root = null;
        size = 0;
    }

    deinit() {
        if (root != null) {
            root.deallocate();
        }
    }

    /// Returns the size of the Map
    def size(): int {
        return size;
    }

    /// Returns true if the Map is empty, otherwise false
    def isEmpty(): bool {
        return size == 0;
    }

    mutating private def rebalance(node: mutable AVLnode<Key, Value>*) {
        var n = node;
        setBalance(n);

        if (n.balance == -2) {
            if (height(n.left!.left) >= height(n.left!.right)) {
                n = rotateRight(n);
            } else {
                n = rotateLeftThenRight(n);
            }
        } else if (n.balance == 2) {
            if (height(n.right!.right) >= height(n.right!.left)) {
                n = rotateLeft(n);
            } else {
                n = rotateRightThenLeft(n);
            }
        }

        if (n.parent != null) {
            rebalance(n.parent);
        } else {
            root = n;
        }
    }

    private def rotateLeft(node: mutable AVLnode<Key, Value>*): mutable AVLnode<Key, Value>* {
        var a = node;
        var b = a.right!;
        b.parent = a.parent;
        a.right = b.left;

        if (a.right != null) {
            a.right.parent = a;
        }

        b.left = a;
        a.parent = b;

        if (b.parent != null) {
            if (b.parent.right === a) {
                b.parent.right = b;
            } else {
                b.parent.left = b;
            }
        }

        setBalance(a);
        setBalance(b);
        return b;
    }

    private def rotateRight(node: mutable AVLnode<Key, Value>*): mutable AVLnode<Key, Value>* {
        var a = node;
        var b = a.left!;
        b.parent = a.parent;
        a.left = b.right;

        if (a.left != null) {
            a.left.parent = a;
        }

        b.right = a;
        a.parent = b;

        if (b.parent != null) {
            if (b.parent.right === a) {
                b.parent.right = b;
            } else {
                b.parent.left = b;
            }
        }

        setBalance(a);
        setBalance(b);
        return b;
    }

    private def rotateLeftThenRight(n: mutable AVLnode<Key, Value>*): mutable AVLnode<Key, Value>* {
        n.left = rotateLeft(n.left!);
        return rotateRight(n);
    }

    private def rotateRightThenLeft(n: mutable AVLnode<Key, Value>*): mutable AVLnode<Key, Value>* {
        n.right = rotateRight(n.right!);
        return rotateLeft(n);
    }

    private def height(n: AVLnode<Key, Value>*?): int {
        if (n == null) {
            return -1;
        }
        return 1 + *max(height(n!.left), height(n!.right));
    }

    private def setBalance(n: mutable AVLnode<Key, Value>*) {
        n.balance = height(n.right) - height(n.left);
    }

    /// Checks if the given element is in the Map. Returns true if it is, otherwise false
    def contains(key: Key*): bool {
        return findNode(key) != null;
    }

    /// Returns the value of the given key, if it exists in the Map. Otherwise, returns null.
    def [](key: Key*): Value*? {
        var found = findNode(key);
        if (found != null) {
            return found.entry.value;
        }
        return null;
    }

    /// Inserts a key-value pair into the Map.
    mutating def insert(key: Key, value: Value): bool {
        if (root == null) {
            root = allocate(AVLnode<Key, Value>(key, null, value));
        } else {
            var n = root;

            while (true) {
                if (n.entry.key == key) {
                    return false;
                }

                var parent = n;
                var goLeft = n.entry.key > key;
                var newNode = goLeft ? n.left : n.right;

                if (newNode == null) {
                    if (goLeft) {
                        parent.left = allocate(AVLnode<Key, Value>(key, parent, value));
                    } else {
                        parent.right = allocate(AVLnode<Key, Value>(key, parent, value));
                    }

                    rebalance(parent);
                    break;
                }
                n = newNode!;
            }
        }

        size++;
        return true;
    }

    /// Removes a key and it's associated value from the Map
    mutating def remove(key: Key*) {
        if (root == null) {
            return;
        }

        var n = root!;
        var parent = root!;
        var delNode: mutable AVLnode<Key, Value>*? = null;
        var child = root;

        while (child != null) {
            parent = n;
            n = child;
            child = (*key >= n.entry.key) ? n.right : n.left;
            if (*key == n.entry.key) {
                delNode = n;
            }
        }

        if (delNode != null) {
            delNode.entry.key = n.entry.key;
            delNode.entry.value = n.entry.value;

            child = (n.left != null) ? n.left : n.right;

            if (root!.entry.key == *key) {
                root = child;
            } else {
                if (parent.left === n) {
                    parent.left = child;
                } else {
                    parent.right = child;
                }

                rebalance(parent);
            }
            n.deinit();
            deallocate(n);
        }
        size--;
    }

    /// Returns the key-value pair corresponding to `key`, or null if it doesn't exist in the Map
    def find(key: Key*): (key: Key, value: Value)*? {
        var node = findNode(key);
        if (node != null) {
            return node.entry;
        }
        return null;
    }

    /// Returns the node corresponding to `key`, or null if it doesn't exist in the Map
    def findNode(key: Key*): AVLnode<Key, Value>*? {
        var n = root;

        while (true) {
            if (n == null) {
                return null;
            }

            if (n!.entry.key == *key) {
                return n!;
            }

            var goLeft = n!.entry.key > *key;
            n = goLeft ? n!.left : n!.right;
        }

        return null;
    }

    /// Returns the key immediately smaller than the one given,
    /// or null, if `key` is the smallest in the Map.
    def lowerKey(key: Key*): Key*? {
        var found = findNode(key);
        if (found == null) {
            return null;
        }
        var lower = lowerNode(found!);

        if (lower == null) {
            return null;
        }
        return lower!.entry.key;
    }

    private def maxInSubtree(node: AVLnode<Key, Value>*): AVLnode<Key, Value>* {
        var n = node;
        while (n.right != null) {
            n = n.right;
        }
        return n;
    }

    private def minInSubtree(node: mutable AVLnode<Key, Value>*): mutable AVLnode<Key, Value>* {
        var n = node;
        while (n.left != null) {
            n = n.left;
        }
        return n;
    }

    /// Returns the node that contains the key immediately smaller than the key of the given node,
    /// or null, if the key of `node` is the smallest value.
    def lowerNode(node: AVLnode<Key, Value>*): AVLnode<Key, Value>*? {
        if (node.left != null) {
            return maxInSubtree(node.left);
        }

        var n = node;
        while (n.parent != null) {
            if (n === n.parent.right) {
                return n.parent;
            }
            n = n.parent;
        }
        return null;
    }

    /// Returns the key immediately higher than the one given,
    /// or null, if `key` is the largest in the Map.
    def higherKey(key: Key*): Key*? {
        var found = findNode(key);
        if (found == null) {
            return null;
        }

        var higher = higherNode(found!);

        if (higher == null) {
            return null;
        }
        return higher!.entry.key;
    }

    /// Returns the node that contains the key immediately larger than the key of the given node,
    /// or null, if the key of `node` is the largest value.
    def higherNode(node: AVLnode<Key, Value>*): mutable AVLnode<Key, Value>*? {
        if (node.right != null) {
            return minInSubtree(node.right);
        }

        var n = node;
        while (n.parent != null) {
            if (n === n.parent.left) {
                return n.parent;
            }
            n = n.parent;
        }
        return null;
    }


    /// Returns the smallest element in the Map, or null if the Map is empty.
    def first(): Key*? {
        if (root == null) {
            return null;
        }
        return minInSubtree(root!).entry.key;
    }

    /// Returns the node with the smallest key in the Map, or null if the Map is empty.
    def firstNode(): mutable AVLnode<Key, Value>*? {
        if (root == null) {
            return null;
        }
        return minInSubtree(root!);
    }

    /// Returns the largest element in the Map, or null if the map is empty.
    def last(): Key*? {
        if (root == null) {
            return null;
        }
        return maxInSubtree(root!).entry.key;
    }

    /// Returns the node with the largest key in the Map, or null if the Map is empty.
    def lastNode(): AVLnode<Key, Value>*? {
        if (root == null) {
            return null;
        }
        return maxInSubtree(root!);
    }

    /// Iterate over the map, in order
    def iterator(): OrderedMapIterator<Key, Value> {
        return OrderedMapIterator(this);
    }
}

/// One node in the AVL tree
struct AVLnode<Key, Value> {
    var entry: (key: Key, value: Value);
    var balance: int;
    var parent: mutable AVLnode<Key, Value>*?;
    var left: mutable AVLnode<Key, Value>*?;
    var right: mutable AVLnode<Key, Value>*?;

    init(key: Key, parent: mutable AVLnode<Key, Value>*?, value: Value) {
        this.entry = (key, value);
        this.parent = parent;
        this.balance = 0;
        this.left = null;
        this.right = null;
    }

    mutating def deallocate() {
        deallocate(this);

        if (left != null) {
            left.deallocate();
        }
        if (right != null) {
            right.deallocate();
        }
    }
}
