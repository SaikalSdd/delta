struct Map<Key: Hashable, Value> {
    var hashTable: Array<Array<(key: Key, value: mutable Value)>>;
    var size: int;

    /// Initializes an empty map
    init() {
        size = 0;
        hashTable = Array<Array<(key: Key, value: mutable Value)>>();
        increaseTableSize(hashTable, 128);
    }

    // FIXME: Should assert that the key is not in the map, instead of no-oping.
    /// Inserts an element into the map. If the element exists already, nothing is done.
    mutating def insert(key: Key, value: Value) {
        if (contains(key)) {
            return;
        }

        var hashValue = convertHash(key.hash()) % capacity();
        hashTable[hashValue].push((key, value));
        size++;

        if (loadFactor() > 0.66) {
            resize();
        }
    }

    /// Inserts, or updates an existing value.
    mutating def set(key: Key, value: Value) {
        var existing = this[key];

        if (existing) {
            *existing = value;
        } else {
            insert(key, value);
        }
    }

    /// Removes an element from the map, if it exists there.
    mutating def remove(e: Key*) {
        var hashValue = convertHash(e.hash()) % capacity();
        var slot = hashTable[hashValue];

        if (slot.size() == 0) {
            return;
        }

        for (var i in 0..slot.size()) {
            if (slot[i].key == *e) {
                slot.removeAt(i);
                size--;
                return;
            }
        }
    }

    /// Expands the hash table size, needed when there's too many elements in the map
    mutating def increaseTableSize(newTable: mutable Array<Array<(key: Key, value: mutable Value)>>*, newCapacity: int) {
        for (var i in 0..newCapacity) {
            newTable.push(Array<(key: Key, value: mutable Value)>());
        }
    }

    def size(): int {
        return size;
    }

    def capacity(): int {
        return hashTable.size();
    }

    /// Resizes the map. This includes copying the old table into a new, bigger one
    mutating def resize() {
        var newTable = Array<Array<(key: Key, value: mutable Value)>>();
        var newCapacity = capacity() * 2;

        increaseTableSize(newTable, newCapacity);

        for (var i in 0..capacity()) {
            var slot = hashTable[i];

            for (var el in slot) {
                newTable[convertHash(el.key.hash()) % newCapacity].push(*el);
            }
        }

        hashTable = newTable;
    }

    def [](e: Key*): Value*? {
        var hashValue = convertHash(e.hash()) % capacity();
        var slot = hashTable[hashValue];

        for (var element in slot) {
            if (element.key == *e) {
                return element.value;
            }
        }

        return null;
    }

    mutating def [](e: Key*): mutable Value*? {
        var hashValue = convertHash(e.hash()) % capacity();
        var slot = hashTable[hashValue];

        for (var element in slot) {
            if (element.key == *e) {
                return element.value;
            }
        }

        return null;
    }

    /// Checks if e is part of the map.
    def contains(e: Key*): bool {
        var hashValue = convertHash(e.hash()) % capacity();
        var slot = hashTable[hashValue];

        if (slot.size() == 0) {
            return false;
        }

        for (var element in slot) {
            if (element.key == *e) {
                return true;
            }
        }

        return false;
    }

    def isEmpty(): bool {
        return size == 0;
    }

    /// Returns the load factor for the map. This is used to increase the map size once
    /// the load factor gets too big.
    def loadFactor(): float64 {
        return float64(size) / (float64(capacity()));
    }

    /// Iterate over the map
    def iterator(): MapIterator<Key, Value> {
        return MapIterator(this);
    }
}

def convertHash(hash: uint64): int {
    return int(hash) & int_max;
}
