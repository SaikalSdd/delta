struct StringRef: Copyable, Comparable, Hashable, Printable {
    ArrayRef<char> characters;

    init(char* pointer, int length) {
        characters = ArrayRef<char>(pointer, length);
    }

    /// Initializes a StringRef referring to a null-terminated C-style string.
    ///
    /// __Note:__ This initializer has a time complexity of O(n) because it has to calculate the
    /// length of the argument string. If you know the length beforehand, consider using
    /// `StringRef.init(char* pointer, uint length)` instead.
    ///
    init(char* cString) {
        characters = ArrayRef<char>(cString, int(strlen(cString)));
    }

    init (String* string) {
        characters = ArrayRef<char>(string.data(), string.size());
    }

    int size() {
        return characters.size();
    }

    /// Returns the character at the given index.
    char operator[](int index) {
        return characters[index];
    }

    char[?]* data() {
        return characters.data();
    }

    bool contains(char c) {
        return find(c, 0) != -1;
    }

    /// Returns the index of the given character, or -1 if it's not found
    int find(char c) {
        return find(c, 0);
    }

    /// Returns the index of the given character, or -1 if it's not found.
    /// Starts from start
    int find(char c, int start) {
        for (var i in start..size()) {
            if (characters[i] == c) {
                return int(i);
            }
        }
        return -1;
    }

    /// Supports using strings with sets and dicts
    uint64 hash() {
        uint64 hashValue = 5381;

        for (var index in 0..characters.size()) {
            hashValue = ((hashValue << 5) + hashValue) + uint64(this[index]);
        }

        return hashValue;
    }

    StringIterator iterator() {
        return StringIterator(this);
    }

    void printTo(mutable String* stream) {
        stream.write(this);
    }

    Ordering compare(StringRef* other) {
        for (var index in 0..min(size(), other.size())) {
            if (this[index] < other[index]) { return Ordering.Less; }
            if (this[index] > other[index]) { return Ordering.Greater; }
        }
        if (size() < other.size()) { return Ordering.Less; }
        if (size() > other.size()) { return Ordering.Greater; }
        return Ordering.Equal;
    }
}

bool operator==(StringRef a, StringRef b) {
    if (a.size() != b.size()) {
        return false;
    }

    for (var index in 0..a.size()) {
        if (a[index] != b[index]) {
            return false;
        }
    }

    return true;
}
