/// A Stream that can both read and write to files
struct FileStream: InputStream, OutputStream {
    void*? file;

    /// Initiates a stream that can both read and write to file
    init(StringRef filename) {
        file = fopen(String(filename).cString(), "a+");

        if (file != null) {
            rewind(file);
        }
    }

    /// TODO when we have default params, switch to that
    init(StringRef filename, bool destroyContents) {
        if (destroyContents) {
            file = fopen(String(filename).cString(), "w+");
        } else {
            init(filename);
        }
    }

    // FIXME: Remove readOnly parameter, FileStream can both read and write.
    init(StringRef filename, bool readOnly) {
        file = fopen(String(filename).cString(), "r");
    }

    // FIXME: Remove readOnly parameter, FileStream can both read and write.
    init(int fileDescriptor, bool readOnly) {
        if (readOnly) {
            file = fdopen(fileDescriptor, "r");
        } else {
            file = fdopen(fileDescriptor, "w");
        }
    }

    deinit() {
        if (file != null) {
            fclose(file);
        }
    }

    mutating void close() {
        if (file != null) {
            fclose(file);
            file = null;
        }
    }

    /// Returns true if the file is open for reading or writing
    bool isOpen() {
        return file != null;
    }

    /// Returns an iterator that can be used to iterate over lines in the file
    LineIterator<FileStream> lines() {
        return LineIterator(this);
    }

    /// Returns an iterator that can be used to iterate over each byte in the file
    ByteIterator<FileStream> bytes() {
        return ByteIterator(this);
    }

    /// Reads one byte from the file
    int readByte() {
        return fgetc(file!);
    }

    /// Reads one line from the file, separated by \n
    String readLine() {
        var ret = String();
        for (var i in bytes()) {
            if (i == '\n') {
                break;
            }
            ret.push(char(i));
        }
        return ret;
    }

    /// Returns true if we have reached the end of the file
    bool eof() {
        var ret = fgetc(file!);
        if (ret < 0) {
            return true;
        }
        ungetc(ret, file!);
        return false;
    }

    /// Writes the given string into the file. Returns true on success, false on failure
    mutating bool write(StringRef string) {
        for (var c in string) {
            var ret = fputc(int(c), file!);
            if (ret <= 0) {
                return false;
            }
        }
        return true;
    }
}
