struct EnumeratedIterator<Element>: Copyable, Iterator<EnumeratedIteratorEntry<Element>> {
    var base: ArrayIterator<Element>;
    var index: int;

    init(iterator: ArrayIterator<Element>) {
        base = iterator;
        index = 0;
    }

    def hasValue(): bool {
        return base.hasValue();
    }

    def value(): EnumeratedIteratorEntry<Element> {
        return EnumeratedIteratorEntry(base.value(), index);
    }

    mutating def increment() {
        base.increment();
        index++;
    }
}

struct EnumeratedIteratorEntry<Value>: Copyable {
    var value: Value*;
    var index: int;

    init(value: Value*, index: int) {
        this.value = value;
        this.index = index;
    }
}
