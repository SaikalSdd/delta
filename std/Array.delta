struct Array<Element> {
    var buffer: mutable Element[?]*;
    var size: int;
    var capacity: int;

    /// Initializes an empty array.
    init() {
        buffer = undefined;
        size = 0;
        capacity = 0;
    }

    /// Initializes an empty array with pre-allocated capacity.
    init(capacity: int) {
        init();
        reserve(capacity);
    }

    /// Initializes an array containing the elements of the given array.
    init(elements: Element[]*) {
        init(capacity: elements.size());

        // TODO: Change this to a for-each loop when arrays can be iterated.
        for (var index in 0..elements.size()) {
            push(elements[index]);
        }
    }

    deinit() {
        if (capacity != 0) {
            // FIXME: Call deinitializers of remaining elements.
            deallocate(buffer);
        }
    }

    /// Returns the number of elements in the array.
    def size(): int {
        return size;
    }

    /// Returns true if the array has no elements, otherwise false
    def isEmpty(): bool {
        return size == 0;
    }

    /// Returns the number of elements the array can store without allocating more memory.
    def capacity(): int {
        return capacity;
    }

    /// Returns the element at the given index.
    def [](index: int): Element* {
        if (index >= size) {
            indexOutOfBounds(index);
        }

        return buffer[index];
    }

    /// Returns the element at the given index.
    mutating def [](index: int): mutable Element* {
        if (index >= size) {
            indexOutOfBounds(index);
        }

        return buffer[index];
    }

    def first(): Element* {
        if (size == 0) {
            emptyArrayFirst();
        }

        return buffer[0];
    }

    def last(): Element* {
        if (size == 0) {
            emptyArrayLast();
        }

        return buffer[size - 1];
    }

    def data(): Element[?]* {
        return buffer;
    }

    mutating def data(): mutable Element[?]* {
        return buffer;
    }

    /// Adds the given element to the end of the array.
    mutating def push(newElement: Element) {
        if (size == capacity) {
            grow();
        }

        // TODO: Shouldn't need '&' here.
        (&buffer[size]).init(newElement);
        size++;
    }

    /// Ensures that the capacity is large enough to store the given number of elements.
    mutating def reserve(minimumCapacity: int) {
        if (minimumCapacity > capacity) {
            var newBuffer = allocateArray<Element>(size: minimumCapacity);

            for (var index in 0..size) {
                var source = &buffer[index];
                var target = &newBuffer[index];
                target.init(*source);
            }

            if (capacity != 0) {
                deallocate(buffer);
            }

            buffer = newBuffer;
            capacity = minimumCapacity;
        }
    }

    /// Removes the first element from the array.
    /// Other elements are moved towards the beginning of the array by one index.
    mutating def removeFirst() {
        if (size == 0) {
            emptyArrayRemoveFirst();
        }

        unsafeRemoveAt(0);
    }

    /// Removes the last element from the array.
    mutating def removeLast() {
        if (size == 0) {
            emptyArrayRemoveLast();
        }

        size--;
        buffer[size].deinit();
    }

    /// Removes and returns the last element.
    mutating def pop(): Element {
        if (size == 0) {
            emptyArrayRemoveLast();
        }

        size--;
        return buffer[size];
    }

    /// Removes the element at the given index from the array.
    /// Elements following the removed element are moved towards the beginning of the array by one index.
    mutating def removeAt(index: int) {
        if (index >= size) {
            indexOutOfBounds(index);
        }

        unsafeRemoveAt(index);
    }

    mutating private def unsafeRemoveAt(index: int) {
        buffer[index].deinit();

        for (var i in (index + 1)..size) {
            var source = &buffer[i];
            var target = &buffer[i - 1];
            target.init(*source);
        }

        size--;
    }

    def iterator(): ArrayIterator<Element> {
        // TODO: When implicit initializers have been implemented, remove the ArrayRef() call below.
        return ArrayIterator(ArrayRef(this));
    }

    mutating def iterator(): MutableArrayIterator<Element> {
        return MutableArrayIterator(this);
    }

    def enumerate(): EnumeratedIterator<Element> {
        return EnumeratedIterator(iterator());
    }

    def map<Input, Output>(transform: (Input) -> Output): Array<Output> {
        var output = Array<Output>(capacity: this.size);

        for (var element in this) {
            output.push(transform(element));
        }

        return output;
    }

    def filter<Input>(include: (Input) -> bool): Array<Element> {
        var output = Array<Element>();

        for (var element in this) {
            if (include(element)) {
                output.push(*element);
            }
        }

        return output;
    }

    mutating private def grow() {
        if (capacity == 0) {
            reserve(1);
        } else {
            reserve(capacity * 2);
        }
    }

    private def indexOutOfBounds(index: int) {
        printf("Array index %d is out of bounds, size is %d\n", index, size());
        fatalError();
    }

    private def emptyArrayFirst() {
        printf("Called first() on empty Array\n");
        fatalError();
    }

    private def emptyArrayLast() {
        printf("Called last() on empty Array\n");
        fatalError();
    }

    private def emptyArrayRemoveFirst() {
        printf("Called removeFirst() on empty Array\n");
        fatalError();
    }

    private def emptyArrayRemoveLast() {
        printf("Called removeLast() on empty Array\n");
        fatalError();
    }
}

def ==<T>(a: ArrayRef<T>, b: ArrayRef<T>): bool {
    if (a.size() != b.size()) {
        return false;
    }

    for (var i in 0..a.size()) {
        if (*a[i] != *b[i]) {
            return false;
        }
    }

    return true;
}
