struct String: Comparable, OutputStream, Printable {
    Array<char> characters;

    /// Initializes an empty string.
    init() {
        characters = Array<char>();
        characters.push('\0');
    }

    init(StringRef string) {
        characters = Array<char>(capacity: string.size() + 1);

        for (var ch in string) {
            characters.push(ch);
        }

        characters.push('\0');
    }

    /// Initializes a string with the characters from a character array of known length.
    init(char* pointer, int length) {
        init(StringRef(pointer, length));
    }

    /// Initializes a string with the contents of a null-terminated C-style string.
    ///
    /// __Note:__ This initializer has a time complexity of O(n) because it has to calculate the
    /// length of the argument string. If you know the length beforehand, consider using
    /// `String.init(char* pointer, uint length)` instead.
    ///
    init(char* cString) {
        init(StringRef(cString, int(strlen(cString))));
    }

    int size() {
        return characters.size() - 1;
    }

    /// Returns the character at the given index.
    char operator[](int index) {
        return characters[index];
    }

    /// Returns the string as a C-style, i.e. null-terminated, string.
    /// Modifying `this` after calling this function invalidates the returned pointer.
    char* cString() {
        return data();
    }

    /// Returns a pointer to the first character in the string.
    char[?]* data() {
        return characters.data();
    }

    bool empty() {
        return size() == 0;
    }

    /// Returns a pointer to the first character in the string.
    mutating mutable char[?]* data() {
        return characters.data();
    }

    mutating void push(char character) {
        characters[size()] = character;
        characters.push('\0');
    }

    mutating bool write(StringRef string) {
        for (var ch in string) {
            push(ch);
        }
        return true;
    }

    /// Removes the first character from the string.
    /// Other characters are moved towards the beginning of the string by one index.
    mutating void removeFirst() {
        characters.removeFirst();
    }

    /// Removes the last character from the string.
    mutating void removeLast() {
        characters.removeAt(characters.size() - 2);
    }

    /// Supports using strings with sets and dicts
    uint64 hash() {
        return StringRef(this).hash();
    }

    StringIterator iterator() {
        // TODO: When implicit initializers have been implemented, remove the StringRef() call below.
        return StringIterator(StringRef(this));
    }

    bool contains(char c) {
        return find(c, 0) != -1;
    }

    /// Returns the index of the given character, or -1 if it's not found
    int find(char c) {
        return find(c, 0);
    }

    /// Returns the index of the given character, or -1 if it's not found.
    /// Starts from start
    int find(char c, int start) {
        for (var i in start..size()) {
            if (characters[i] == c) {
                return int(i);
            }
        }
        return -1;
    }

    // Returns the substring of the string in the given range, [inclusive, exclusive]
    StringRef substr(Range<int> range) {
        if (range.end > size()) {
            indexOutOfBounds(range.end);
        }
        return StringRef(characters[range.start], range.size());
    }

    // Splits the string by the given delimiter
    Array<StringRef> split(char delim) {
        var tokens = Array<StringRef>();

        var prev = 0;
        var pos = 0;

        while (true) {
            pos = find(delim, prev);

            if (pos == -1) {
                pos = size();
            }

            var token = substr(prev..pos);
            tokens.push(token);

            prev = pos + 1;

            if (pos > size() || prev > size()) {
                break;
            }
        }
        return tokens;
    }

    // Splits the string by whitespace
    Array<StringRef> split() {
        return split(' ');
    }

    void printTo(mutable String* stream) {
        stream.write(StringRef(this));
    }

    Ordering compare(String* other) {
        return StringRef(this).compare(StringRef(other));
    }

    private void indexOutOfBounds(int index) {
        printf("Range index %d is out of bounds, size is %d\n", index, size());
        fatalError();
    }
}

String operator+(StringRef a, StringRef b) {
    var result = String();

    for (var ch in a) {
        result.push(ch);
    }

    for (var ch in b) {
        result.push(ch);
    }

    return result;
}

String operator+(String a, StringRef b) {
    var result = a;

    for (var ch in b) {
        result.push(ch);
    }

    return result;
}

bool operator==(String* a, String* b) {
    return StringRef(a) == StringRef(b);
}

bool operator==(String* a, StringRef b) {
    return StringRef(a) == b;
}

bool operator==(StringRef a, String* b) {
    return a == StringRef(b);
}
