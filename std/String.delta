struct String: Comparable, OutputStream, Printable {
    var characters: Array<char>;

    /// Initializes an empty string.
    init() {
        characters = Array<char>();
        characters.push('\0');
    }

    init(string: StringRef) {
        characters = Array<char>(capacity: string.size() + 1);

        for (var ch in string) {
            characters.push(ch);
        }

        characters.push('\0');
    }

    /// Initializes a string with the characters from a character array of known length.
    init(pointer: char*, length: uint) {
        init(StringRef(pointer, length));
    }

    /// Initializes a string with the contents of a null-terminated C-style string.
    ///
    /// __Note:__ This initializer has a time complexity of O(n) because it has to calculate the
    /// length of the argument string. If you know the length beforehand, consider using
    /// `String.init(pointer: char*, length: uint)` instead.
    ///
    init(cString: char*) {
        init(StringRef(cString, uint(strlen(cString))));
    }

    def size(): uint {
        return characters.size() - 1;
    }

    /// Returns the character at the given index.
    def [](index: uint): char {
        return *characters[index];
    }

    /// Returns the string as a C-style, i.e. null-terminated, string.
    /// Modifying `this` after calling this function invalidates the returned pointer.
    def cString(): char* {
        return data();
    }

    /// Returns a pointer to the first character in the string.
    def data(): char* {
        return characters.data();
    }

    def isEmpty(): bool {
        return size() == 0;
    }

    /// Returns a pointer to the first character in the string.
    mutating def data(): mutable char* {
        return characters.data();
    }

    mutating def push(character: char) {
        *characters[size()] = character;
        characters.push('\0');
    }

    mutating def write(string: StringRef): bool {
        for (var ch in string) {
            push(ch);
        }
        return true;
    }

    /// Removes the first character from the string.
    /// Other characters are moved towards the beginning of the string by one index.
    mutating def removeFirst() {
        characters.removeFirst();
    }

    /// Removes the last character from the string.
    mutating def removeLast() {
        characters.removeAt(characters.size() - 2);
    }

    /// Supports using strings with sets and dicts
    def hash(): uint64 {
        return StringRef(this).hash();
    }

    def iterator(): StringIterator {
        // TODO: When implicit initializers have been implemented, remove the StringRef() call below.
        return StringIterator(StringRef(this));
    }

    def contains(c: char): bool {
        return find(c, 0) != -1;
    }

    /// Returns the index of the given character, or -1 if it's not found
    def find(c: char): int {
        return find(c, 0);
    }

    /// Returns the index of the given character, or -1 if it's not found.
    /// Starts from start
    def find(c: char, start: uint): int {
        for (var i in start..size()) {
            if (*characters[i] == c) {
                return int(i);
            }
        }
        return -1;
    }

    // Returns the substring of the string in the given range, [inclusive, exclusive]
    def substr(range: Range<int>): StringRef {
        if (range.end > int(size())) {
            indexOutOfBounds(range.end);
        }
        return StringRef(characters[uint(range.start)], uint(range.size()));
    }

    // Returns the substring of the string in the given range, [inclusive, exclusive]
    def substr(range: Range<uint>): StringRef {
        if (range.end > size()) {
            indexOutOfBounds(range.end);
        }
        return StringRef(characters[range.start], range.size());
    }

    // Splits the string by the given delimiter
    def split(delim: char): Array<StringRef> {
        var tokens = Array<StringRef>();

        var prev: int = 0;
        var pos: int = 0;

        while (true) {
            pos = find(delim, uint(prev));

            if (pos == -1) {
                pos = int(size());
            }

            var token = substr(prev..pos);
            tokens.push(token);

            prev = pos + 1;

            if (pos > int(size()) || prev > int(size())) {
                break;
            }
        }
        return tokens;
    }

    // Splits the string by whitespace
    def split(): Array<StringRef> {
        return split(' ');
    }

    def printTo(stream: mutable String*) {
        stream.write(StringRef(this));
    }

    def compare(other: String*): Ordering {
        return StringRef(this).compare(StringRef(other));
    }

    private def indexOutOfBounds(index: uint) {
        printf("Range index %u is out of bounds, size is %u\n", index, size());
        fatalError();
    }

    private def indexOutOfBounds(index: int) {
        printf("Range index %d is out of bounds, size is %u\n", index, size());
        fatalError();
    }
}

def +(a: StringRef, b: StringRef): String {
    var result = String();

    for (var ch in a) {
        result.push(ch);
    }

    for (var ch in b) {
        result.push(ch);
    }

    return result;
}

def +(a: String, b: StringRef): String {
    var result = a;

    for (var ch in b) {
        result.push(ch);
    }

    return result;
}

def ==(a: String*, b: String*): bool {
    return StringRef(a) == StringRef(b);
}

def ==(a: String*, b: StringRef): bool {
    return StringRef(a) == b;
}

def ==(a: StringRef, b: String*): bool {
    return a == StringRef(b);
}
