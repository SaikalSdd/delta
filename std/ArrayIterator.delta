struct ArrayIterator<Element>: Copyable, Iterator<Element*> {
    Element[?]* current;
    Element[?]* end;

    // TODO: Fix bug that prevents writing 'Element[]*' here.
    init(ArrayRef<Element> array) {
        current = array.data();
        end = &array.data()[array.size()];
    }

    bool hasValue() {
        return current !== end;
    }

    Element* value() {
        return current;
    }

    mutating void increment() {
        current++;
    }
}

struct MutableArrayIterator<Element>: Copyable {
    mutable Element[?]* current;
    mutable Element[?]* end;

    init(mutable Array<Element>* array) {
        current = array.data();
        end = &array.data()[array.size()];
    }

    bool hasValue() {
        return current !== end;
    }

    mutable Element* value() {
        return current;
    }

    mutating void increment() {
        current++;
    }
}
