struct ArrayIterator<Element>: Copyable, Iterator<Element*> {
    var current: Element[?]*;
    var end: Element[?]*;

    // TODO: Fix bug that prevents writing 'Element[]*' here.
    init(array: ArrayRef<Element>) {
        current = array.data();
        end = &array.data()[array.size()];
    }

    def hasValue(): bool {
        return current !== end;
    }

    def value(): Element* {
        return current;
    }

    mutating def increment() {
        current++;
    }
}

struct MutableArrayIterator<Element>: Copyable {
    var current: mutable Element[?]*;
    var end: mutable Element[?]*;

    init(array: mutable Array<Element>*) {
        current = array.data();
        end = &array.data()[array.size()];
    }

    def hasValue(): bool {
        return current !== end;
    }

    def value(): mutable Element* {
        return current;
    }

    mutating def increment() {
        current++;
    }
}
