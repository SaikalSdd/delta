struct MapIterator<Key, Value>: Copyable, Iterator<(key: Key, value: Value)*> {
    var hashTableIterator: ArrayIterator<Array<(key: Key, value: Value)>>;
    var current: (key: Key, value: Value)[?]*;

    init(map: Map<Key, Value>*) {
        hashTableIterator = map.hashTable.iterator();
        current = undefined;
        skipEmptySlots();
    }

    def hasValue(): bool {
        return hashTableIterator.hasValue();
    }

    def value(): (key: Key, value: Value)* {
        return current;
    }

    mutating def increment() {
        var slot = hashTableIterator.value();
        var slotEnd = &slot.data()[slot.size()];
        current++;

        // TODO: Allow comparing T[?]* and T* without casts.
        if (cast<void*>(current) === cast<void*>(slotEnd)) {
            hashTableIterator.increment();
            skipEmptySlots();
        }
    }

    mutating private def skipEmptySlots() {
        while (hashTableIterator.hasValue()) {
            if (hashTableIterator.value().size() != 0) {
                current = hashTableIterator.value().data();
                break;
            }
            hashTableIterator.increment();
        }
    }
}
