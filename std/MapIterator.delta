struct MapIterator<Key, Value>: Copyable, Iterator<(Key key, mutable Value value)*> {
    ArrayIterator<List<(Key key, mutable Value value)>> hashTableIterator;
    (Key key, mutable Value value)[?]* current;

    init(Map<Key, Value>* map) {
        hashTableIterator = map.hashTable.iterator();
        current = undefined;
        skipEmptySlots();
    }

    bool hasValue() {
        return hashTableIterator.hasValue();
    }

    (Key key, mutable Value value)* value() {
        return current;
    }

    mutating void increment() {
        var slot = hashTableIterator.value();
        var slotEnd = &slot.data()[slot.size()];
        current++;

        // TODO: Allow comparing T[?]* and T* without casts.
        if (cast<void*>(current) === cast<void*>(slotEnd)) {
            hashTableIterator.increment();
            skipEmptySlots();
        }
    }

    mutating private void skipEmptySlots() {
        while (hashTableIterator.hasValue()) {
            if (hashTableIterator.value().size() != 0) {
                current = hashTableIterator.value().data();
                break;
            }
            hashTableIterator.increment();
        }
    }
}
